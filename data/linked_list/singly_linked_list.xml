<content>
  <name>Singly Linked List</name>
  <description>

  </description>
  <script>
  <![CDATA[

  
class ListNode {
  constructor(val = 0, next = null) {
    this.val = val;   // The data value of the node
    this.next = next; // Pointer to the next node (initially null)
  }
}

function insertNodeAtBeginning(head, value) {
    let newNode = new ListNode(value, head);
    return newNode;
}
function insertNodeAtEnd(head, value) {
    let newNode = new ListNode(value);
    if(head === null) {
        return newNode;
    }
    let current = head;
    let i = 0
    while (current.next !== null) {
        current = current.next;
            console.log(i++)
    }
    current.next = newNode;
    return head;
}
function deleteNode(head, value) {
  if(head === null) return null // list is empty
  if(head.val === value) return head.next; // head is the element to delete.
  let current = head;
  while(current.next !== null && current.next.val !== value) {
    current = current.next;
  } 
  if( current.next !== null) {
    current.next = current.next.next
  }
  return head
  
}
function traverseList(head) {
  let current = head
  while(current !== null) {
    console.log(current.val);
    current = current.next
  }
}
function searchInList(head, value) {
  let current = head;
  while( current !== null) {
    if(current.val === value) {
      return true
    } else {
      current = current.next
    }
  }
  return false;
}


let head = new ListNode();
console.log(head)
head = insertNodeAtEnd(head, 4)
console.log(head)
head = insertNodeAtBeginning(head, 2)
console.log(head)
// head = deleteNode(head, 2)
// console.log(head)
// head = insertNodeAtEnd(head, 2)
// console.log(head)
// head = insertNodeAtBeginning(head, 10)
// console.log(head)
traverseList(head)
searchInList(head, 4)

    
  

    ]]>
  </script>
</content>