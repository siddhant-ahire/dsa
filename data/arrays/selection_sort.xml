<content>
  <name>Selection Sort</name>
  <description>
Selection sort is a simple comparison-based sorting algorithm. It works by dividing the array into a sorted and an unsorted part. The algorithm repeatedly selects the smallest (or largest) element from the unsorted part and swaps it with the first unsorted element, thus growing the sorted portion one element at a time. 

Although its time complexity is \(O(n^2)\), it is easy to implement and understand, making it a good choice for small or simple datasets. However, it is not suitable for large datasets due to its inefficiency.
  </description>
  <script>
  <![CDATA[
    /**
    * Function to perform Selection Sort on an array
    * @param {number[]} arr - The array of numbers to be sorted
    * @returns {number[]} - The sorted array
    */
    function selectionSort(arr) {
        let n = arr.length;

        // Traverse through all elements in the array
        for (let i = 0; i < n - 1; i++) {
            // Assume the current element is the minimum
            let minIndex = i;

            // Check the rest of the array to find the true minimum element
            for (let j = i + 1; j < n; j++) {
                if (arr[j] < arr[minIndex]) {
                    minIndex = j; // Update minIndex if a smaller element is found
                }
            }

            // Swap the found minimum element with the first element of the unsorted part
            if (minIndex !== i) {
                let temp = arr[i];
                arr[i] = arr[minIndex];
                arr[minIndex] = temp;
            }

            // Logging the array after each outer loop iteration for clarity
            console.log(`Step ${i + 1}: ${arr}`);
        }

        return arr;
    }

    // Example usage:
    const arr = [64, 25, 12, 22, 11];
    console.log("Original array:", arr);

    const sortedArray = selectionSort(arr);
    console.log("Sorted array:", sortedArray);
    ]]>
  </script>
</content>